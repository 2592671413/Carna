cmake_minimum_required(VERSION 2.8.7)

############################################
# It is important to use the root binary directory,
# so that the proper LIB from the tested project is found
# and the EXE is placed in the same directory as the DLL.
############################################
set( CMAKE_CURRENT_BINARY_DIR ${CMAKE_BINARY_DIR} )
############################################

set( CMAKE_DEBUG_POSTFIX d )
set( EXECUTABLE_OUTPUT_PATH ${CMAKE_CURRENT_BINARY_DIR}/bin )
set( LIBRARY_OUTPUT_PATH ${CMAKE_CURRENT_BINARY_DIR}/bin )



############################################
# Project name
############################################
project( CarnaInteractiveTest )
set( TARGET_NAME	${PROJECT_NAME}-${FULL_VERSION} )
############################################



############################################
# Find dependencies and add them later to the linker (see below)
############################################

# Qt
find_package( Qt4 4.8.0 COMPONENTS QtCore QtOpenGL REQUIRED )
include( ${QT_USE_FILE} )
add_definitions( ${QT_DEFINITIONS} )

# Boost
set(Boost_USE_MULTITHREADED ON)
set(Boost_USE_STATIC_RUNTIME OFF)
find_package(Boost 1.55.0 COMPONENTS iostreams)
if(Boost_FOUND)
    include_directories(${Boost_INCLUDE_DIRS})
endif()

# GLEW
find_package( GLEW 1.7.0 REQUIRED )
include_directories( ${GLEW_INCLUDE_DIRS} )

# Carna
include_directories( ${CMAKE_SOURCE_DIR}/include )
link_directories( ${CMAKE_BINARY_DIR}/bin )

# Eigen
find_package( Eigen3 REQUIRED )
include_directories( ${EIGEN3_INCLUDE_DIR} )

# TRTK
find_package( TRTK 0.13.1 REQUIRED )
include_directories( ${TRTK_INCLUDE_DIR} )

# Carna-DICOM
find_package(CarnaDICOM QUIET)

############################################
# Project
############################################

include_directories(${CMAKE_PROJECT_DIR}src)
include_directories(${CMAKE_PROJECT_DIR}../Tools)
set( HEADERS
		../Tools/HUGZSceneFactory.h
		../Tools/HUIO.h
		../Tools/MyVisualization.h
		src/MPRDemo.h
		src/MyVisualizationDemo.h
		src/SlicePlaneVisualizationDemo.h
		src/VolumeVisualizationDemo.h
		src/OffscreenDisplayDemo.h
		src/InteractiveOffscreenDisplayDemo.h
		src/FactorialMaskDemo.h
		src/BinaryMaskDemo.h
		src/HistogramExporter.h
		src/CompressedVolumeExporter.h
		src/CompressedVolumeImporter.h
	)
set( QOBJECT_HEADERS
		src/OffscreenDisplayTestingWidget.h
		src/OpeningDialog.h
	)
set( SRC
		../Tools/MyVisualization.cpp
		src/main.cpp
		src/OffscreenDisplayDemo.cpp
		src/OffscreenDisplayTestingWidget.cpp
	)
set( FORMS
		""
	)
set( RESOURCES
		""
	)
	
unset( RESOURCES_RCC )
QT4_WRAP_CPP( QOBJECT_HEADERS_MOC ${QOBJECT_HEADERS} )
QT4_WRAP_UI( FORMS_HEADERS ${FORMS} )
QT4_ADD_RESOURCES( RESOURCES_RCC ${RESOURCES} )

include_directories( ${CMAKE_CURRENT_BINARY_DIR} )

if(CARNADICOM_FOUND AND Boost_FOUND)

	add_definitions(
			-DNOMINMAX
			-DBOOST_IOSTREAMS_NO_LIB
			-D_SCL_SECURE_NO_WARNINGS
			-DEXPECTED_MAJOR_VERSION=${MAJOR_VERSION}
			-DEXPECTED_MINOR_VERSION=${MINOR_VERSION}
			-DEXPECTED_RELEASE_VERSION=${PATCH_VERSION}
		)
	remove_definitions( -DCARNA_LIB )
	
	include_directories(${CARNADICOM_INCLUDE_DIR})
	
	add_executable( ${TARGET_NAME} WIN32
			${SRC}
			${HEADERS}
			${QOBJECT_HEADERS}
			${QOBJECT_HEADERS_MOC}
			${FORMS_HEADERS}
			${RESOURCES_RCC}
		)

	target_link_libraries( ${TARGET_NAME}
			opengl32
			glu32
			${GLEW_LIBLIST}
			${QT_LIBRARIES}
			${TRTK_LIBRARIES}
			${Boost_LIBRARIES}
			${CARNADICOM_LIBRARIES}
			optimized	Carna-${FULL_VERSION}
			debug		Carna-${FULL_VERSION}${CMAKE_DEBUG_POSTFIX}
		)
	
	if(MSVC)
		set_target_properties(
				${TARGET_NAME} PROPERTIES
				WIN32_EXECUTABLE YES
				LINK_FLAGS "/ENTRY:mainCRTStartup"
			)
	endif(MSVC)

elseif(NOT CARNADICOM_FOUND)

	message(WARNING
		"\nCarnaDICOM not found, skipping ${PROJECT_NAME}.\n"
		  "You don't have to worry about this unless you need "
		  "an executable demo project within your Carna "
		  "development environment, i.e. when you are going to "
		  "work on Carna. In this case, build and install the "
		  "Carna-DICOM module and then re-run Carna CMake script.\n")

elseif(NOT Boost_FOUND)

	message(WARNING
		"\nBoost not found, skipping ${PROJECT_NAME}.\n"
		  "You don't have to worry about this unless you need "
		  "an executable demo project within your Carna "
		  "development environment, i.e. when you are going to "
		  "work on Carna. In this case, build and install the "
		  "Carna-DICOM module and then re-run Carna CMake script.\n")

endif()
