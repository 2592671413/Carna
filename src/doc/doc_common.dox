/** \defgroup   MathTools  Math Tools
  *
  * \brief  There are several math helper classes and global functions provided.
  */
  
/** \defgroup   MemoryTools  Memory Tools
  */
  
/** \defgroup   StringTools  String Tools
  */
  
namespace Carna
{

/** \defgroup   ParallelizationTools    Parallelization
  *
  * The \ref base::Parallelization template provides an easy-to-use parallelization support.
  *
  * \section    ParallelizationExample Example
  *
  * Parallelization is usually accomplished by distributing a job to multiple workers, each executing a part of the job concurrently.
  * First we need to define the interface of a particular worker.
  * In the example below the class \c Workload is a placeholder that represents the actual work that is to be done:
  *
  * \code
  * #include <Carna/base/Parallelization.h>
  *
  * class Worker : public QObject
  * {
  *
  *     Q_OBJECT
  *
  *     Workload& task;
  *
  *     bool canceled;
  *     
  *
  * public:
  *
  *     Worker( Workload& );
  *
  *     bool isCanceled() const;
  *
  *     unsigned int getWorkAmount() const;
  *
  *
  * public slots:
  *
  *     void run();
  *
  *     void cancel();
  *
  *
  * signals:
  *
  *     void progressed( int amount );
  *
  *     void finished();
  *
  * };
  * \endcode
  *
  * It is very important to provide the methods \c getWorkAmount, \c run and \c cancel, and the signals \c progressed and \c finished.
  * Those are used by the \ref base::Parallelization template.
  * But before we come to this, lets implement the above interface:
  *
  * \code
  * #include <QApplication>
  *
  * Worker::Worker( Workload& task )
  *     : task( task )
  *     , canceled( false )
  * {
  * }
  *
  * bool Worker::isCanceled() const
  * {
  *     return canceled;
  * }
  *
  * unsigned int Worker::getWorkAmount() const
  * {
  *     return task.countElements();
  * }
  *
  * void Worker::run()
  * {
  *     canceled = false;
  *     for( unsigned int i = 0; !canceled && i < task.countElements(); ++i )
  *     {
  *         task.computeElement( i );
  *         emit progressed( 1 );
  *     }
  *     emit finished();
  * }
  *
  * void Worker::cancel()
  * {
  *     canceled = true;
  * }
  * \endcode
  *
  * Running the job's workers in parallel is now fairly simple.
  * The example below uses two parallel threads for the job execution:
  *
  * \code
  * Carna::base::Parallelization< Worker > job;
  * job.putWorker( new Worker( tasks[ 0 ] ) );
  * job.putWorker( new Worker( tasks[ 1 ] ) );
  * job.run();
  * \endcode
  *
  * The above snippet opens \ref base::qt::CarnaProgressDialog instance for the duration of the job execution, that hints the user how quickly the job is accomplished.
  * It also provides an \em abort button that cancels the execution.
  * The value returned by <code>job.run()</code> indicates whether the execution was canceled (\c false) or finished successfully (\c true).
  * Hence, <code>job.run()</code> does not return until the job is finished.
  *
  * One might also want to use a different visual feedback component but the \c %CarnaProgressDialog.
  * In this case, use the second template argument of \c Parallelization.
  * By default, \ref base::qt::ParallelizationUI is provided here, which is an adapter to \c %CarnaProgressDialog.
  * There are also several requirements to the interface of the provided class:
  * Refer to the \ref base::Parallelization "Parallelization documentation" for details.
  */

}  // namespace Carna
  
/** \defgroup   Widgets General Purpose Widgets
  *
  * Widgets are offered for the following tasks:
  *
  * - \ref    Carna::base::qt::ColorPicker        "Picking colors with or without alpha values?"
  *           \image  html  ColorPicker01.png
  * - \ref    Carna::base::qt::WideColorPicker    "Quickly manipulating colors with alpha values?"
  *           \image  html  WideColorPicker01.png
  * - \ref    Carna::base::qt::ExpandableGroupBox "On-demand expendable group box for saving UI space?"
  *           \image  html  ExpandableGroupBox01.png
  * - \ref    Carna::base::qt::RotationView       "Visualizing rotations?"
  *           \image  html  RotationView01.png
  * - \ref    Carna::base::qt::RotationEdit       "Manipulating rotations?"
  *           \image  html  RotationEdit01.png
  * - \ref    Carna::base::qt::MultiSpanSlider    "Defining multiple intervals intuitively?"
  *           \image  html  MultiSpanSlider01.png
  * - \ref    Carna::base::qt::Object3DChooser "Selecting Object3D instances?"
  *           \image  html    Object3DSelectionWidget01.png
  */
  
/** \namespace  Carna
  *
  * \brief  Holds classes and functions of the Carna library.
  */
